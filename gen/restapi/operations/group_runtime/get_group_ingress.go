// Code generated by go-swagger; DO NOT EDIT.

package group_runtime

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetGroupIngressHandlerFunc turns a function with the right signature into a get group ingress handler
type GetGroupIngressHandlerFunc func(GetGroupIngressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGroupIngressHandlerFunc) Handle(params GetGroupIngressParams) middleware.Responder {
	return fn(params)
}

// GetGroupIngressHandler interface for that can handle valid get group ingress params
type GetGroupIngressHandler interface {
	Handle(GetGroupIngressParams) middleware.Responder
}

// NewGetGroupIngress creates a new http.Handler for the get group ingress operation
func NewGetGroupIngress(ctx *middleware.Context, handler GetGroupIngressHandler) *GetGroupIngress {
	return &GetGroupIngress{Context: ctx, Handler: handler}
}

/*GetGroupIngress swagger:route GET /api/v1/groups/{groupname}/runtime/ingress groupRuntime getGroupIngress

GetGroupIngress get group ingress API

*/
type GetGroupIngress struct {
	Context *middleware.Context
	Handler GetGroupIngressHandler
}

func (o *GetGroupIngress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetGroupIngressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
