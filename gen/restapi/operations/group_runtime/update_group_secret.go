// Code generated by go-swagger; DO NOT EDIT.

package group_runtime

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateGroupSecretHandlerFunc turns a function with the right signature into a update group secret handler
type UpdateGroupSecretHandlerFunc func(UpdateGroupSecretParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateGroupSecretHandlerFunc) Handle(params UpdateGroupSecretParams) middleware.Responder {
	return fn(params)
}

// UpdateGroupSecretHandler interface for that can handle valid update group secret params
type UpdateGroupSecretHandler interface {
	Handle(UpdateGroupSecretParams) middleware.Responder
}

// NewUpdateGroupSecret creates a new http.Handler for the update group secret operation
func NewUpdateGroupSecret(ctx *middleware.Context, handler UpdateGroupSecretHandler) *UpdateGroupSecret {
	return &UpdateGroupSecret{Context: ctx, Handler: handler}
}

/*UpdateGroupSecret swagger:route PUT /api/v1/groups/{groupname}/runtime/secrets/{secretname} groupRuntime updateGroupSecret

UpdateGroupSecret update group secret API

*/
type UpdateGroupSecret struct {
	Context *middleware.Context
	Handler UpdateGroupSecretHandler
}

func (o *UpdateGroupSecret) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateGroupSecretParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
