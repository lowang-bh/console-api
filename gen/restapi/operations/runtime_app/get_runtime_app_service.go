// Code generated by go-swagger; DO NOT EDIT.

package runtime_app

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRuntimeAppServiceHandlerFunc turns a function with the right signature into a get runtime app service handler
type GetRuntimeAppServiceHandlerFunc func(GetRuntimeAppServiceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRuntimeAppServiceHandlerFunc) Handle(params GetRuntimeAppServiceParams) middleware.Responder {
	return fn(params)
}

// GetRuntimeAppServiceHandler interface for that can handle valid get runtime app service params
type GetRuntimeAppServiceHandler interface {
	Handle(GetRuntimeAppServiceParams) middleware.Responder
}

// NewGetRuntimeAppService creates a new http.Handler for the get runtime app service operation
func NewGetRuntimeAppService(ctx *middleware.Context, handler GetRuntimeAppServiceHandler) *GetRuntimeAppService {
	return &GetRuntimeAppService{Context: ctx, Handler: handler}
}

/*GetRuntimeAppService swagger:route GET /api/v1/groups/{groupname}/runtime/apps/{appname}/service runtimeApp getRuntimeAppService

GetRuntimeAppService get runtime app service API

*/
type GetRuntimeAppService struct {
	Context *middleware.Context
	Handler GetRuntimeAppServiceHandler
}

func (o *GetRuntimeAppService) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRuntimeAppServiceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
