// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/laincloud/console-api/gen/restapi/operations/build_app"
	"github.com/laincloud/console-api/gen/restapi/operations/build_apps"
	"github.com/laincloud/console-api/gen/restapi/operations/cluster"
	"github.com/laincloud/console-api/gen/restapi/operations/group_runtime"
	"github.com/laincloud/console-api/gen/restapi/operations/groups"
	"github.com/laincloud/console-api/gen/restapi/operations/ping"
	"github.com/laincloud/console-api/gen/restapi/operations/runtime_app"
	"github.com/laincloud/console-api/gen/restapi/operations/runtime_apps"
)

// NewConsoleAPI creates a new Console instance
func NewConsoleAPI(spec *loads.Document) *ConsoleAPI {
	return &ConsoleAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		TxtProducer:         runtime.TextProducer(),
		BuildAppsCreateBuildAppHandler: build_apps.CreateBuildAppHandlerFunc(func(params build_apps.CreateBuildAppParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppsCreateBuildApp has not yet been implemented")
		}),
		GroupsCreateGroupHandler: groups.CreateGroupHandlerFunc(func(params groups.CreateGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsCreateGroup has not yet been implemented")
		}),
		GroupRuntimeCreateGroupPVCHandler: group_runtime.CreateGroupPVCHandlerFunc(func(params group_runtime.CreateGroupPVCParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeCreateGroupPVC has not yet been implemented")
		}),
		GroupRuntimeCreateGroupSecretHandler: group_runtime.CreateGroupSecretHandlerFunc(func(params group_runtime.CreateGroupSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeCreateGroupSecret has not yet been implemented")
		}),
		GroupRuntimeCreateOrUpdateGroupIngressHandler: group_runtime.CreateOrUpdateGroupIngressHandlerFunc(func(params group_runtime.CreateOrUpdateGroupIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeCreateOrUpdateGroupIngress has not yet been implemented")
		}),
		RuntimeAppCreateOrUpdateRuntimeAppConfigMapHandler: runtime_app.CreateOrUpdateRuntimeAppConfigMapHandlerFunc(func(params runtime_app.CreateOrUpdateRuntimeAppConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppCreateOrUpdateRuntimeAppConfigMap has not yet been implemented")
		}),
		RuntimeAppCreateOrUpdateRuntimeAppServiceHandler: runtime_app.CreateOrUpdateRuntimeAppServiceHandlerFunc(func(params runtime_app.CreateOrUpdateRuntimeAppServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppCreateOrUpdateRuntimeAppService has not yet been implemented")
		}),
		RuntimeAppCreateOrUpdateRuntimeAppWorkloadHandler: runtime_app.CreateOrUpdateRuntimeAppWorkloadHandlerFunc(func(params runtime_app.CreateOrUpdateRuntimeAppWorkloadParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppCreateOrUpdateRuntimeAppWorkload has not yet been implemented")
		}),
		RuntimeAppsCreateRuntimeAppHandler: runtime_apps.CreateRuntimeAppHandlerFunc(func(params runtime_apps.CreateRuntimeAppParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppsCreateRuntimeApp has not yet been implemented")
		}),
		RuntimeAppCreateRuntimeAppSecretHandler: runtime_app.CreateRuntimeAppSecretHandlerFunc(func(params runtime_app.CreateRuntimeAppSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppCreateRuntimeAppSecret has not yet been implemented")
		}),
		BuildAppsDeleteBuildAppHandler: build_apps.DeleteBuildAppHandlerFunc(func(params build_apps.DeleteBuildAppParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppsDeleteBuildApp has not yet been implemented")
		}),
		GroupsDeleteGroupHandler: groups.DeleteGroupHandlerFunc(func(params groups.DeleteGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteGroup has not yet been implemented")
		}),
		GroupRuntimeDeleteGroupPVCHandler: group_runtime.DeleteGroupPVCHandlerFunc(func(params group_runtime.DeleteGroupPVCParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeDeleteGroupPVC has not yet been implemented")
		}),
		GroupRuntimeDeleteGroupSecretHandler: group_runtime.DeleteGroupSecretHandlerFunc(func(params group_runtime.DeleteGroupSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeDeleteGroupSecret has not yet been implemented")
		}),
		RuntimeAppsDeleteRuntimeAppHandler: runtime_apps.DeleteRuntimeAppHandlerFunc(func(params runtime_apps.DeleteRuntimeAppParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppsDeleteRuntimeApp has not yet been implemented")
		}),
		RuntimeAppDeleteRuntimeAppSecretHandler: runtime_app.DeleteRuntimeAppSecretHandlerFunc(func(params runtime_app.DeleteRuntimeAppSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppDeleteRuntimeAppSecret has not yet been implemented")
		}),
		RuntimeAppExecRuntimeAppPodHandler: runtime_app.ExecRuntimeAppPodHandlerFunc(func(params runtime_app.ExecRuntimeAppPodParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppExecRuntimeAppPod has not yet been implemented")
		}),
		BuildAppsGetBuildAppHandler: build_apps.GetBuildAppHandlerFunc(func(params build_apps.GetBuildAppParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppsGetBuildApp has not yet been implemented")
		}),
		BuildAppsGetBuildAppsHandler: build_apps.GetBuildAppsHandlerFunc(func(params build_apps.GetBuildAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppsGetBuildApps has not yet been implemented")
		}),
		BuildAppGetBuildLogHandler: build_app.GetBuildLogHandlerFunc(func(params build_app.GetBuildLogParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppGetBuildLog has not yet been implemented")
		}),
		BuildAppGetBuildPublishmentsHandler: build_app.GetBuildPublishmentsHandlerFunc(func(params build_app.GetBuildPublishmentsParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppGetBuildPublishments has not yet been implemented")
		}),
		BuildAppGetBuildsHandler: build_app.GetBuildsHandlerFunc(func(params build_app.GetBuildsParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppGetBuilds has not yet been implemented")
		}),
		ClusterGetClusterComponentsStatusHandler: cluster.GetClusterComponentsStatusHandlerFunc(func(params cluster.GetClusterComponentsStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation ClusterGetClusterComponentsStatus has not yet been implemented")
		}),
		ClusterGetClusterResourceUsageHandler: cluster.GetClusterResourceUsageHandlerFunc(func(params cluster.GetClusterResourceUsageParams) middleware.Responder {
			return middleware.NotImplemented("operation ClusterGetClusterResourceUsage has not yet been implemented")
		}),
		GroupsGetGroupHandler: groups.GetGroupHandlerFunc(func(params groups.GetGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetGroup has not yet been implemented")
		}),
		GroupRuntimeGetGroupIngressHandler: group_runtime.GetGroupIngressHandlerFunc(func(params group_runtime.GetGroupIngressParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeGetGroupIngress has not yet been implemented")
		}),
		GroupRuntimeGetGroupPVCHandler: group_runtime.GetGroupPVCHandlerFunc(func(params group_runtime.GetGroupPVCParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeGetGroupPVC has not yet been implemented")
		}),
		GroupRuntimeGetGroupPVCsHandler: group_runtime.GetGroupPVCsHandlerFunc(func(params group_runtime.GetGroupPVCsParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeGetGroupPVCs has not yet been implemented")
		}),
		GroupRuntimeGetGroupSecretHandler: group_runtime.GetGroupSecretHandlerFunc(func(params group_runtime.GetGroupSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeGetGroupSecret has not yet been implemented")
		}),
		GroupRuntimeGetGroupSecretsHandler: group_runtime.GetGroupSecretsHandlerFunc(func(params group_runtime.GetGroupSecretsParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeGetGroupSecrets has not yet been implemented")
		}),
		GroupsGetGroupsHandler: groups.GetGroupsHandlerFunc(func(params groups.GetGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetGroups has not yet been implemented")
		}),
		RuntimeAppsGetRuntimeAppHandler: runtime_apps.GetRuntimeAppHandlerFunc(func(params runtime_apps.GetRuntimeAppParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppsGetRuntimeApp has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppConfigMapHandler: runtime_app.GetRuntimeAppConfigMapHandlerFunc(func(params runtime_app.GetRuntimeAppConfigMapParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppConfigMap has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppConfigMapHistoryHandler: runtime_app.GetRuntimeAppConfigMapHistoryHandlerFunc(func(params runtime_app.GetRuntimeAppConfigMapHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppConfigMapHistory has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppPodHandler: runtime_app.GetRuntimeAppPodHandlerFunc(func(params runtime_app.GetRuntimeAppPodParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppPod has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppPodsHandler: runtime_app.GetRuntimeAppPodsHandlerFunc(func(params runtime_app.GetRuntimeAppPodsParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppPods has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppSecretHandler: runtime_app.GetRuntimeAppSecretHandlerFunc(func(params runtime_app.GetRuntimeAppSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppSecret has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppSecretHistoryHandler: runtime_app.GetRuntimeAppSecretHistoryHandlerFunc(func(params runtime_app.GetRuntimeAppSecretHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppSecretHistory has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppSecretsHandler: runtime_app.GetRuntimeAppSecretsHandlerFunc(func(params runtime_app.GetRuntimeAppSecretsParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppSecrets has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppServiceHandler: runtime_app.GetRuntimeAppServiceHandlerFunc(func(params runtime_app.GetRuntimeAppServiceParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppService has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppServiceHistoryHandler: runtime_app.GetRuntimeAppServiceHistoryHandlerFunc(func(params runtime_app.GetRuntimeAppServiceHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppServiceHistory has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppWorkloadHandler: runtime_app.GetRuntimeAppWorkloadHandlerFunc(func(params runtime_app.GetRuntimeAppWorkloadParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppWorkload has not yet been implemented")
		}),
		RuntimeAppGetRuntimeAppWorkloadHistoryHandler: runtime_app.GetRuntimeAppWorkloadHistoryHandlerFunc(func(params runtime_app.GetRuntimeAppWorkloadHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppGetRuntimeAppWorkloadHistory has not yet been implemented")
		}),
		RuntimeAppsGetRuntimeAppsHandler: runtime_apps.GetRuntimeAppsHandlerFunc(func(params runtime_apps.GetRuntimeAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppsGetRuntimeApps has not yet been implemented")
		}),
		RuntimeAppLogsRuntimeAppPodHandler: runtime_app.LogsRuntimeAppPodHandlerFunc(func(params runtime_app.LogsRuntimeAppPodParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppLogsRuntimeAppPod has not yet been implemented")
		}),
		PingPingHandler: ping.PingHandlerFunc(func(params ping.PingParams) middleware.Responder {
			return middleware.NotImplemented("operation PingPing has not yet been implemented")
		}),
		BuildAppsUpdateBuildAppHandler: build_apps.UpdateBuildAppHandlerFunc(func(params build_apps.UpdateBuildAppParams) middleware.Responder {
			return middleware.NotImplemented("operation BuildAppsUpdateBuildApp has not yet been implemented")
		}),
		GroupsUpdateGroupHandler: groups.UpdateGroupHandlerFunc(func(params groups.UpdateGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsUpdateGroup has not yet been implemented")
		}),
		GroupRuntimeUpdateGroupPVCHandler: group_runtime.UpdateGroupPVCHandlerFunc(func(params group_runtime.UpdateGroupPVCParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeUpdateGroupPVC has not yet been implemented")
		}),
		GroupRuntimeUpdateGroupSecretHandler: group_runtime.UpdateGroupSecretHandlerFunc(func(params group_runtime.UpdateGroupSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupRuntimeUpdateGroupSecret has not yet been implemented")
		}),
		RuntimeAppsUpdateRuntimeAppHandler: runtime_apps.UpdateRuntimeAppHandlerFunc(func(params runtime_apps.UpdateRuntimeAppParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppsUpdateRuntimeApp has not yet been implemented")
		}),
		RuntimeAppUpdateRuntimeAppSecretHandler: runtime_app.UpdateRuntimeAppSecretHandlerFunc(func(params runtime_app.UpdateRuntimeAppSecretParams) middleware.Responder {
			return middleware.NotImplemented("operation RuntimeAppUpdateRuntimeAppSecret has not yet been implemented")
		}),
	}
}

/*ConsoleAPI The Console API Server for LAIN Cluster */
type ConsoleAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// BuildAppsCreateBuildAppHandler sets the operation handler for the create build app operation
	BuildAppsCreateBuildAppHandler build_apps.CreateBuildAppHandler
	// GroupsCreateGroupHandler sets the operation handler for the create group operation
	GroupsCreateGroupHandler groups.CreateGroupHandler
	// GroupRuntimeCreateGroupPVCHandler sets the operation handler for the create group p v c operation
	GroupRuntimeCreateGroupPVCHandler group_runtime.CreateGroupPVCHandler
	// GroupRuntimeCreateGroupSecretHandler sets the operation handler for the create group secret operation
	GroupRuntimeCreateGroupSecretHandler group_runtime.CreateGroupSecretHandler
	// GroupRuntimeCreateOrUpdateGroupIngressHandler sets the operation handler for the create or update group ingress operation
	GroupRuntimeCreateOrUpdateGroupIngressHandler group_runtime.CreateOrUpdateGroupIngressHandler
	// RuntimeAppCreateOrUpdateRuntimeAppConfigMapHandler sets the operation handler for the create or update runtime app config map operation
	RuntimeAppCreateOrUpdateRuntimeAppConfigMapHandler runtime_app.CreateOrUpdateRuntimeAppConfigMapHandler
	// RuntimeAppCreateOrUpdateRuntimeAppServiceHandler sets the operation handler for the create or update runtime app service operation
	RuntimeAppCreateOrUpdateRuntimeAppServiceHandler runtime_app.CreateOrUpdateRuntimeAppServiceHandler
	// RuntimeAppCreateOrUpdateRuntimeAppWorkloadHandler sets the operation handler for the create or update runtime app workload operation
	RuntimeAppCreateOrUpdateRuntimeAppWorkloadHandler runtime_app.CreateOrUpdateRuntimeAppWorkloadHandler
	// RuntimeAppsCreateRuntimeAppHandler sets the operation handler for the create runtime app operation
	RuntimeAppsCreateRuntimeAppHandler runtime_apps.CreateRuntimeAppHandler
	// RuntimeAppCreateRuntimeAppSecretHandler sets the operation handler for the create runtime app secret operation
	RuntimeAppCreateRuntimeAppSecretHandler runtime_app.CreateRuntimeAppSecretHandler
	// BuildAppsDeleteBuildAppHandler sets the operation handler for the delete build app operation
	BuildAppsDeleteBuildAppHandler build_apps.DeleteBuildAppHandler
	// GroupsDeleteGroupHandler sets the operation handler for the delete group operation
	GroupsDeleteGroupHandler groups.DeleteGroupHandler
	// GroupRuntimeDeleteGroupPVCHandler sets the operation handler for the delete group p v c operation
	GroupRuntimeDeleteGroupPVCHandler group_runtime.DeleteGroupPVCHandler
	// GroupRuntimeDeleteGroupSecretHandler sets the operation handler for the delete group secret operation
	GroupRuntimeDeleteGroupSecretHandler group_runtime.DeleteGroupSecretHandler
	// RuntimeAppsDeleteRuntimeAppHandler sets the operation handler for the delete runtime app operation
	RuntimeAppsDeleteRuntimeAppHandler runtime_apps.DeleteRuntimeAppHandler
	// RuntimeAppDeleteRuntimeAppSecretHandler sets the operation handler for the delete runtime app secret operation
	RuntimeAppDeleteRuntimeAppSecretHandler runtime_app.DeleteRuntimeAppSecretHandler
	// RuntimeAppExecRuntimeAppPodHandler sets the operation handler for the exec runtime app pod operation
	RuntimeAppExecRuntimeAppPodHandler runtime_app.ExecRuntimeAppPodHandler
	// BuildAppsGetBuildAppHandler sets the operation handler for the get build app operation
	BuildAppsGetBuildAppHandler build_apps.GetBuildAppHandler
	// BuildAppsGetBuildAppsHandler sets the operation handler for the get build apps operation
	BuildAppsGetBuildAppsHandler build_apps.GetBuildAppsHandler
	// BuildAppGetBuildLogHandler sets the operation handler for the get build log operation
	BuildAppGetBuildLogHandler build_app.GetBuildLogHandler
	// BuildAppGetBuildPublishmentsHandler sets the operation handler for the get build publishments operation
	BuildAppGetBuildPublishmentsHandler build_app.GetBuildPublishmentsHandler
	// BuildAppGetBuildsHandler sets the operation handler for the get builds operation
	BuildAppGetBuildsHandler build_app.GetBuildsHandler
	// ClusterGetClusterComponentsStatusHandler sets the operation handler for the get cluster components status operation
	ClusterGetClusterComponentsStatusHandler cluster.GetClusterComponentsStatusHandler
	// ClusterGetClusterResourceUsageHandler sets the operation handler for the get cluster resource usage operation
	ClusterGetClusterResourceUsageHandler cluster.GetClusterResourceUsageHandler
	// GroupsGetGroupHandler sets the operation handler for the get group operation
	GroupsGetGroupHandler groups.GetGroupHandler
	// GroupRuntimeGetGroupIngressHandler sets the operation handler for the get group ingress operation
	GroupRuntimeGetGroupIngressHandler group_runtime.GetGroupIngressHandler
	// GroupRuntimeGetGroupPVCHandler sets the operation handler for the get group p v c operation
	GroupRuntimeGetGroupPVCHandler group_runtime.GetGroupPVCHandler
	// GroupRuntimeGetGroupPVCsHandler sets the operation handler for the get group p v cs operation
	GroupRuntimeGetGroupPVCsHandler group_runtime.GetGroupPVCsHandler
	// GroupRuntimeGetGroupSecretHandler sets the operation handler for the get group secret operation
	GroupRuntimeGetGroupSecretHandler group_runtime.GetGroupSecretHandler
	// GroupRuntimeGetGroupSecretsHandler sets the operation handler for the get group secrets operation
	GroupRuntimeGetGroupSecretsHandler group_runtime.GetGroupSecretsHandler
	// GroupsGetGroupsHandler sets the operation handler for the get groups operation
	GroupsGetGroupsHandler groups.GetGroupsHandler
	// RuntimeAppsGetRuntimeAppHandler sets the operation handler for the get runtime app operation
	RuntimeAppsGetRuntimeAppHandler runtime_apps.GetRuntimeAppHandler
	// RuntimeAppGetRuntimeAppConfigMapHandler sets the operation handler for the get runtime app config map operation
	RuntimeAppGetRuntimeAppConfigMapHandler runtime_app.GetRuntimeAppConfigMapHandler
	// RuntimeAppGetRuntimeAppConfigMapHistoryHandler sets the operation handler for the get runtime app config map history operation
	RuntimeAppGetRuntimeAppConfigMapHistoryHandler runtime_app.GetRuntimeAppConfigMapHistoryHandler
	// RuntimeAppGetRuntimeAppPodHandler sets the operation handler for the get runtime app pod operation
	RuntimeAppGetRuntimeAppPodHandler runtime_app.GetRuntimeAppPodHandler
	// RuntimeAppGetRuntimeAppPodsHandler sets the operation handler for the get runtime app pods operation
	RuntimeAppGetRuntimeAppPodsHandler runtime_app.GetRuntimeAppPodsHandler
	// RuntimeAppGetRuntimeAppSecretHandler sets the operation handler for the get runtime app secret operation
	RuntimeAppGetRuntimeAppSecretHandler runtime_app.GetRuntimeAppSecretHandler
	// RuntimeAppGetRuntimeAppSecretHistoryHandler sets the operation handler for the get runtime app secret history operation
	RuntimeAppGetRuntimeAppSecretHistoryHandler runtime_app.GetRuntimeAppSecretHistoryHandler
	// RuntimeAppGetRuntimeAppSecretsHandler sets the operation handler for the get runtime app secrets operation
	RuntimeAppGetRuntimeAppSecretsHandler runtime_app.GetRuntimeAppSecretsHandler
	// RuntimeAppGetRuntimeAppServiceHandler sets the operation handler for the get runtime app service operation
	RuntimeAppGetRuntimeAppServiceHandler runtime_app.GetRuntimeAppServiceHandler
	// RuntimeAppGetRuntimeAppServiceHistoryHandler sets the operation handler for the get runtime app service history operation
	RuntimeAppGetRuntimeAppServiceHistoryHandler runtime_app.GetRuntimeAppServiceHistoryHandler
	// RuntimeAppGetRuntimeAppWorkloadHandler sets the operation handler for the get runtime app workload operation
	RuntimeAppGetRuntimeAppWorkloadHandler runtime_app.GetRuntimeAppWorkloadHandler
	// RuntimeAppGetRuntimeAppWorkloadHistoryHandler sets the operation handler for the get runtime app workload history operation
	RuntimeAppGetRuntimeAppWorkloadHistoryHandler runtime_app.GetRuntimeAppWorkloadHistoryHandler
	// RuntimeAppsGetRuntimeAppsHandler sets the operation handler for the get runtime apps operation
	RuntimeAppsGetRuntimeAppsHandler runtime_apps.GetRuntimeAppsHandler
	// RuntimeAppLogsRuntimeAppPodHandler sets the operation handler for the logs runtime app pod operation
	RuntimeAppLogsRuntimeAppPodHandler runtime_app.LogsRuntimeAppPodHandler
	// PingPingHandler sets the operation handler for the ping operation
	PingPingHandler ping.PingHandler
	// BuildAppsUpdateBuildAppHandler sets the operation handler for the update build app operation
	BuildAppsUpdateBuildAppHandler build_apps.UpdateBuildAppHandler
	// GroupsUpdateGroupHandler sets the operation handler for the update group operation
	GroupsUpdateGroupHandler groups.UpdateGroupHandler
	// GroupRuntimeUpdateGroupPVCHandler sets the operation handler for the update group p v c operation
	GroupRuntimeUpdateGroupPVCHandler group_runtime.UpdateGroupPVCHandler
	// GroupRuntimeUpdateGroupSecretHandler sets the operation handler for the update group secret operation
	GroupRuntimeUpdateGroupSecretHandler group_runtime.UpdateGroupSecretHandler
	// RuntimeAppsUpdateRuntimeAppHandler sets the operation handler for the update runtime app operation
	RuntimeAppsUpdateRuntimeAppHandler runtime_apps.UpdateRuntimeAppHandler
	// RuntimeAppUpdateRuntimeAppSecretHandler sets the operation handler for the update runtime app secret operation
	RuntimeAppUpdateRuntimeAppSecretHandler runtime_app.UpdateRuntimeAppSecretHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ConsoleAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ConsoleAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ConsoleAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ConsoleAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ConsoleAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ConsoleAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ConsoleAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ConsoleAPI
func (o *ConsoleAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.BuildAppsCreateBuildAppHandler == nil {
		unregistered = append(unregistered, "build_apps.CreateBuildAppHandler")
	}

	if o.GroupsCreateGroupHandler == nil {
		unregistered = append(unregistered, "groups.CreateGroupHandler")
	}

	if o.GroupRuntimeCreateGroupPVCHandler == nil {
		unregistered = append(unregistered, "group_runtime.CreateGroupPVCHandler")
	}

	if o.GroupRuntimeCreateGroupSecretHandler == nil {
		unregistered = append(unregistered, "group_runtime.CreateGroupSecretHandler")
	}

	if o.GroupRuntimeCreateOrUpdateGroupIngressHandler == nil {
		unregistered = append(unregistered, "group_runtime.CreateOrUpdateGroupIngressHandler")
	}

	if o.RuntimeAppCreateOrUpdateRuntimeAppConfigMapHandler == nil {
		unregistered = append(unregistered, "runtime_app.CreateOrUpdateRuntimeAppConfigMapHandler")
	}

	if o.RuntimeAppCreateOrUpdateRuntimeAppServiceHandler == nil {
		unregistered = append(unregistered, "runtime_app.CreateOrUpdateRuntimeAppServiceHandler")
	}

	if o.RuntimeAppCreateOrUpdateRuntimeAppWorkloadHandler == nil {
		unregistered = append(unregistered, "runtime_app.CreateOrUpdateRuntimeAppWorkloadHandler")
	}

	if o.RuntimeAppsCreateRuntimeAppHandler == nil {
		unregistered = append(unregistered, "runtime_apps.CreateRuntimeAppHandler")
	}

	if o.RuntimeAppCreateRuntimeAppSecretHandler == nil {
		unregistered = append(unregistered, "runtime_app.CreateRuntimeAppSecretHandler")
	}

	if o.BuildAppsDeleteBuildAppHandler == nil {
		unregistered = append(unregistered, "build_apps.DeleteBuildAppHandler")
	}

	if o.GroupsDeleteGroupHandler == nil {
		unregistered = append(unregistered, "groups.DeleteGroupHandler")
	}

	if o.GroupRuntimeDeleteGroupPVCHandler == nil {
		unregistered = append(unregistered, "group_runtime.DeleteGroupPVCHandler")
	}

	if o.GroupRuntimeDeleteGroupSecretHandler == nil {
		unregistered = append(unregistered, "group_runtime.DeleteGroupSecretHandler")
	}

	if o.RuntimeAppsDeleteRuntimeAppHandler == nil {
		unregistered = append(unregistered, "runtime_apps.DeleteRuntimeAppHandler")
	}

	if o.RuntimeAppDeleteRuntimeAppSecretHandler == nil {
		unregistered = append(unregistered, "runtime_app.DeleteRuntimeAppSecretHandler")
	}

	if o.RuntimeAppExecRuntimeAppPodHandler == nil {
		unregistered = append(unregistered, "runtime_app.ExecRuntimeAppPodHandler")
	}

	if o.BuildAppsGetBuildAppHandler == nil {
		unregistered = append(unregistered, "build_apps.GetBuildAppHandler")
	}

	if o.BuildAppsGetBuildAppsHandler == nil {
		unregistered = append(unregistered, "build_apps.GetBuildAppsHandler")
	}

	if o.BuildAppGetBuildLogHandler == nil {
		unregistered = append(unregistered, "build_app.GetBuildLogHandler")
	}

	if o.BuildAppGetBuildPublishmentsHandler == nil {
		unregistered = append(unregistered, "build_app.GetBuildPublishmentsHandler")
	}

	if o.BuildAppGetBuildsHandler == nil {
		unregistered = append(unregistered, "build_app.GetBuildsHandler")
	}

	if o.ClusterGetClusterComponentsStatusHandler == nil {
		unregistered = append(unregistered, "cluster.GetClusterComponentsStatusHandler")
	}

	if o.ClusterGetClusterResourceUsageHandler == nil {
		unregistered = append(unregistered, "cluster.GetClusterResourceUsageHandler")
	}

	if o.GroupsGetGroupHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupHandler")
	}

	if o.GroupRuntimeGetGroupIngressHandler == nil {
		unregistered = append(unregistered, "group_runtime.GetGroupIngressHandler")
	}

	if o.GroupRuntimeGetGroupPVCHandler == nil {
		unregistered = append(unregistered, "group_runtime.GetGroupPVCHandler")
	}

	if o.GroupRuntimeGetGroupPVCsHandler == nil {
		unregistered = append(unregistered, "group_runtime.GetGroupPVCsHandler")
	}

	if o.GroupRuntimeGetGroupSecretHandler == nil {
		unregistered = append(unregistered, "group_runtime.GetGroupSecretHandler")
	}

	if o.GroupRuntimeGetGroupSecretsHandler == nil {
		unregistered = append(unregistered, "group_runtime.GetGroupSecretsHandler")
	}

	if o.GroupsGetGroupsHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupsHandler")
	}

	if o.RuntimeAppsGetRuntimeAppHandler == nil {
		unregistered = append(unregistered, "runtime_apps.GetRuntimeAppHandler")
	}

	if o.RuntimeAppGetRuntimeAppConfigMapHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppConfigMapHandler")
	}

	if o.RuntimeAppGetRuntimeAppConfigMapHistoryHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppConfigMapHistoryHandler")
	}

	if o.RuntimeAppGetRuntimeAppPodHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppPodHandler")
	}

	if o.RuntimeAppGetRuntimeAppPodsHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppPodsHandler")
	}

	if o.RuntimeAppGetRuntimeAppSecretHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppSecretHandler")
	}

	if o.RuntimeAppGetRuntimeAppSecretHistoryHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppSecretHistoryHandler")
	}

	if o.RuntimeAppGetRuntimeAppSecretsHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppSecretsHandler")
	}

	if o.RuntimeAppGetRuntimeAppServiceHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppServiceHandler")
	}

	if o.RuntimeAppGetRuntimeAppServiceHistoryHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppServiceHistoryHandler")
	}

	if o.RuntimeAppGetRuntimeAppWorkloadHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppWorkloadHandler")
	}

	if o.RuntimeAppGetRuntimeAppWorkloadHistoryHandler == nil {
		unregistered = append(unregistered, "runtime_app.GetRuntimeAppWorkloadHistoryHandler")
	}

	if o.RuntimeAppsGetRuntimeAppsHandler == nil {
		unregistered = append(unregistered, "runtime_apps.GetRuntimeAppsHandler")
	}

	if o.RuntimeAppLogsRuntimeAppPodHandler == nil {
		unregistered = append(unregistered, "runtime_app.LogsRuntimeAppPodHandler")
	}

	if o.PingPingHandler == nil {
		unregistered = append(unregistered, "ping.PingHandler")
	}

	if o.BuildAppsUpdateBuildAppHandler == nil {
		unregistered = append(unregistered, "build_apps.UpdateBuildAppHandler")
	}

	if o.GroupsUpdateGroupHandler == nil {
		unregistered = append(unregistered, "groups.UpdateGroupHandler")
	}

	if o.GroupRuntimeUpdateGroupPVCHandler == nil {
		unregistered = append(unregistered, "group_runtime.UpdateGroupPVCHandler")
	}

	if o.GroupRuntimeUpdateGroupSecretHandler == nil {
		unregistered = append(unregistered, "group_runtime.UpdateGroupSecretHandler")
	}

	if o.RuntimeAppsUpdateRuntimeAppHandler == nil {
		unregistered = append(unregistered, "runtime_apps.UpdateRuntimeAppHandler")
	}

	if o.RuntimeAppUpdateRuntimeAppSecretHandler == nil {
		unregistered = append(unregistered, "runtime_app.UpdateRuntimeAppSecretHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ConsoleAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ConsoleAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ConsoleAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *ConsoleAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ConsoleAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ConsoleAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the console API
func (o *ConsoleAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ConsoleAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/groups/{groupname}/build/apps"] = build_apps.NewCreateBuildApp(o.context, o.BuildAppsCreateBuildAppHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/groups"] = groups.NewCreateGroup(o.context, o.GroupsCreateGroupHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/groups/{groupname}/runtime/pvcs"] = group_runtime.NewCreateGroupPVC(o.context, o.GroupRuntimeCreateGroupPVCHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/groups/{groupname}/runtime/secrets"] = group_runtime.NewCreateGroupSecret(o.context, o.GroupRuntimeCreateGroupSecretHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/ingress"] = group_runtime.NewCreateOrUpdateGroupIngress(o.context, o.GroupRuntimeCreateOrUpdateGroupIngressHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/configmap"] = runtime_app.NewCreateOrUpdateRuntimeAppConfigMap(o.context, o.RuntimeAppCreateOrUpdateRuntimeAppConfigMapHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/service"] = runtime_app.NewCreateOrUpdateRuntimeAppService(o.context, o.RuntimeAppCreateOrUpdateRuntimeAppServiceHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/workload"] = runtime_app.NewCreateOrUpdateRuntimeAppWorkload(o.context, o.RuntimeAppCreateOrUpdateRuntimeAppWorkloadHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/groups/{groupname}/runtime/apps"] = runtime_apps.NewCreateRuntimeApp(o.context, o.RuntimeAppsCreateRuntimeAppHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/secrets"] = runtime_app.NewCreateRuntimeAppSecret(o.context, o.RuntimeAppCreateRuntimeAppSecretHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/groups/{groupname}/build/apps/{appname}"] = build_apps.NewDeleteBuildApp(o.context, o.BuildAppsDeleteBuildAppHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/groups/{groupname}"] = groups.NewDeleteGroup(o.context, o.GroupsDeleteGroupHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/groups/{groupname}/runtime/pvcs/{pvcname}"] = group_runtime.NewDeleteGroupPVC(o.context, o.GroupRuntimeDeleteGroupPVCHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/groups/{groupname}/runtime/secrets/{secretname}"] = group_runtime.NewDeleteGroupSecret(o.context, o.GroupRuntimeDeleteGroupSecretHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/groups/{groupname}/runtime/apps/{appname}"] = runtime_apps.NewDeleteRuntimeApp(o.context, o.RuntimeAppsDeleteRuntimeAppHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/secrets/{secretname}"] = runtime_app.NewDeleteRuntimeAppSecret(o.context, o.RuntimeAppDeleteRuntimeAppSecretHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/pods/{podname}/exec"] = runtime_app.NewExecRuntimeAppPod(o.context, o.RuntimeAppExecRuntimeAppPodHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/build/apps/{appname}"] = build_apps.NewGetBuildApp(o.context, o.BuildAppsGetBuildAppHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/build/apps"] = build_apps.NewGetBuildApps(o.context, o.BuildAppsGetBuildAppsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/build/apps/{appname}/builds/{buildid}/log"] = build_app.NewGetBuildLog(o.context, o.BuildAppGetBuildLogHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/build/apps/{appname}/builds/{buildid}/publishments"] = build_app.NewGetBuildPublishments(o.context, o.BuildAppGetBuildPublishmentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/build/apps/{appname}/builds"] = build_app.NewGetBuilds(o.context, o.BuildAppGetBuildsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/cluster/componentsstatus"] = cluster.NewGetClusterComponentsStatus(o.context, o.ClusterGetClusterComponentsStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/cluster/resourceusage"] = cluster.NewGetClusterResourceUsage(o.context, o.ClusterGetClusterResourceUsageHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}"] = groups.NewGetGroup(o.context, o.GroupsGetGroupHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/ingress"] = group_runtime.NewGetGroupIngress(o.context, o.GroupRuntimeGetGroupIngressHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/pvcs/{pvcname}"] = group_runtime.NewGetGroupPVC(o.context, o.GroupRuntimeGetGroupPVCHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/pvcs"] = group_runtime.NewGetGroupPVCs(o.context, o.GroupRuntimeGetGroupPVCsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/secrets/{secretname}"] = group_runtime.NewGetGroupSecret(o.context, o.GroupRuntimeGetGroupSecretHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/secrets"] = group_runtime.NewGetGroupSecrets(o.context, o.GroupRuntimeGetGroupSecretsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups"] = groups.NewGetGroups(o.context, o.GroupsGetGroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}"] = runtime_apps.NewGetRuntimeApp(o.context, o.RuntimeAppsGetRuntimeAppHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/configmap"] = runtime_app.NewGetRuntimeAppConfigMap(o.context, o.RuntimeAppGetRuntimeAppConfigMapHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/configmap/history"] = runtime_app.NewGetRuntimeAppConfigMapHistory(o.context, o.RuntimeAppGetRuntimeAppConfigMapHistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/pods/{podname}"] = runtime_app.NewGetRuntimeAppPod(o.context, o.RuntimeAppGetRuntimeAppPodHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/pods"] = runtime_app.NewGetRuntimeAppPods(o.context, o.RuntimeAppGetRuntimeAppPodsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/secrets/{secretname}"] = runtime_app.NewGetRuntimeAppSecret(o.context, o.RuntimeAppGetRuntimeAppSecretHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/secrets/{secretname}/history"] = runtime_app.NewGetRuntimeAppSecretHistory(o.context, o.RuntimeAppGetRuntimeAppSecretHistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/secrets"] = runtime_app.NewGetRuntimeAppSecrets(o.context, o.RuntimeAppGetRuntimeAppSecretsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/service"] = runtime_app.NewGetRuntimeAppService(o.context, o.RuntimeAppGetRuntimeAppServiceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/service/history"] = runtime_app.NewGetRuntimeAppServiceHistory(o.context, o.RuntimeAppGetRuntimeAppServiceHistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/workload"] = runtime_app.NewGetRuntimeAppWorkload(o.context, o.RuntimeAppGetRuntimeAppWorkloadHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/workload/history"] = runtime_app.NewGetRuntimeAppWorkloadHistory(o.context, o.RuntimeAppGetRuntimeAppWorkloadHistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps"] = runtime_apps.NewGetRuntimeApps(o.context, o.RuntimeAppsGetRuntimeAppsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/pods/{podname}/logs"] = runtime_app.NewLogsRuntimeAppPod(o.context, o.RuntimeAppLogsRuntimeAppPodHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/api/v1/ping"] = ping.NewPing(o.context, o.PingPingHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/build/apps/{appname}"] = build_apps.NewUpdateBuildApp(o.context, o.BuildAppsUpdateBuildAppHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}"] = groups.NewUpdateGroup(o.context, o.GroupsUpdateGroupHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/pvcs/{pvcname}"] = group_runtime.NewUpdateGroupPVC(o.context, o.GroupRuntimeUpdateGroupPVCHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/secrets/{secretname}"] = group_runtime.NewUpdateGroupSecret(o.context, o.GroupRuntimeUpdateGroupSecretHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/apps/{appname}"] = runtime_apps.NewUpdateRuntimeApp(o.context, o.RuntimeAppsUpdateRuntimeAppHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/api/v1/groups/{groupname}/runtime/apps/{appname}/secrets/{secretname}"] = runtime_app.NewUpdateRuntimeAppSecret(o.context, o.RuntimeAppUpdateRuntimeAppSecretHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ConsoleAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ConsoleAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ConsoleAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ConsoleAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
