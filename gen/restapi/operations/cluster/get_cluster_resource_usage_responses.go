// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/laincloud/console-api/gen/models"
)

// GetClusterResourceUsageOKCode is the HTTP code returned for type GetClusterResourceUsageOK
const GetClusterResourceUsageOKCode int = 200

/*GetClusterResourceUsageOK Get the cluster resouce usage

swagger:response getClusterResourceUsageOK
*/
type GetClusterResourceUsageOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResourceUsage `json:"body,omitempty"`
}

// NewGetClusterResourceUsageOK creates GetClusterResourceUsageOK with default headers values
func NewGetClusterResourceUsageOK() *GetClusterResourceUsageOK {

	return &GetClusterResourceUsageOK{}
}

// WithPayload adds the payload to the get cluster resource usage o k response
func (o *GetClusterResourceUsageOK) WithPayload(payload *models.ResourceUsage) *GetClusterResourceUsageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster resource usage o k response
func (o *GetClusterResourceUsageOK) SetPayload(payload *models.ResourceUsage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterResourceUsageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetClusterResourceUsageDefault Failed

swagger:response getClusterResourceUsageDefault
*/
type GetClusterResourceUsageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetClusterResourceUsageDefault creates GetClusterResourceUsageDefault with default headers values
func NewGetClusterResourceUsageDefault(code int) *GetClusterResourceUsageDefault {
	if code <= 0 {
		code = 500
	}

	return &GetClusterResourceUsageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get cluster resource usage default response
func (o *GetClusterResourceUsageDefault) WithStatusCode(code int) *GetClusterResourceUsageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get cluster resource usage default response
func (o *GetClusterResourceUsageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get cluster resource usage default response
func (o *GetClusterResourceUsageDefault) WithPayload(payload *models.Error) *GetClusterResourceUsageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get cluster resource usage default response
func (o *GetClusterResourceUsageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetClusterResourceUsageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
