// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuildApp build app
// swagger:model buildApp
type BuildApp struct {

	// Unix timstamp (Unit: second)
	CreatedAt int64 `json:"createdAt,omitempty"`

	// 创建者邮箱
	// Min Length: 1
	CreatedBy string `json:"createdBy,omitempty"`

	// description
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// images
	Images []*Image `json:"images"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// 所有者邮箱
	// Min Length: 1
	OwnedBy string `json:"ownedBy,omitempty"`

	// gitlab
	// Min Length: 1
	SourceType string `json:"sourceType,omitempty"`

	// source URL
	// Min Length: 1
	SourceURL string `json:"sourceURL,omitempty"`

	// Unix timstamp (Unit: second)
	UpdatedAt int64 `json:"updatedAt,omitempty"`
}

// Validate validates this build app
func (m *BuildApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildApp) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if err := validate.MinLength("createdBy", "body", string(m.CreatedBy), 1); err != nil {
		return err
	}

	return nil
}

func (m *BuildApp) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *BuildApp) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BuildApp) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *BuildApp) validateOwnedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnedBy) { // not required
		return nil
	}

	if err := validate.MinLength("ownedBy", "body", string(m.OwnedBy), 1); err != nil {
		return err
	}

	return nil
}

func (m *BuildApp) validateSourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	if err := validate.MinLength("sourceType", "body", string(m.SourceType), 1); err != nil {
		return err
	}

	return nil
}

func (m *BuildApp) validateSourceURL(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceURL) { // not required
		return nil
	}

	if err := validate.MinLength("sourceURL", "body", string(m.SourceURL), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildApp) UnmarshalBinary(b []byte) error {
	var res BuildApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
