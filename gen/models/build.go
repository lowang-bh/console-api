// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Build build
// swagger:model build
type Build struct {

	// Unix timstamp (Unit: second)
	EndedAt int64 `json:"endedAt,omitempty"`

	// id
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// Unix timstamp (Unit: second)
	StartedAt int64 `json:"startedAt,omitempty"`

	// succeeded/failed/cancelled
	Status string `json:"status,omitempty"`
}

// Validate validates this build
func (m *Build) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Build) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Build) UnmarshalBinary(b []byte) error {
	var res Build
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
