// Code generated by go-swagger; DO NOT EDIT.

package ingress

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetIngressHandlerFunc turns a function with the right signature into a get ingress handler
type GetIngressHandlerFunc func(GetIngressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIngressHandlerFunc) Handle(params GetIngressParams) middleware.Responder {
	return fn(params)
}

// GetIngressHandler interface for that can handle valid get ingress params
type GetIngressHandler interface {
	Handle(GetIngressParams) middleware.Responder
}

// NewGetIngress creates a new http.Handler for the get ingress operation
func NewGetIngress(ctx *middleware.Context, handler GetIngressHandler) *GetIngress {
	return &GetIngress{Context: ctx, Handler: handler}
}

/*GetIngress swagger:route GET /api/v1/groups/{groupname}/runtime/ingress ingress getIngress

GetIngress get ingress API

*/
type GetIngress struct {
	Context *middleware.Context
	Handler GetIngressHandler
}

func (o *GetIngress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetIngressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
