// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/laincloud/console-api/restapi/operations/apps"
	"github.com/laincloud/console-api/restapi/operations/deployment"
	"github.com/laincloud/console-api/restapi/operations/groups"
	"github.com/laincloud/console-api/restapi/operations/ping"
)

// NewConsoleAPI creates a new Console instance
func NewConsoleAPI(spec *loads.Document) *ConsoleAPI {
	return &ConsoleAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		PingGetPingHandler: ping.GetPingHandlerFunc(func(params ping.GetPingParams) middleware.Responder {
			return middleware.NotImplemented("operation PingGetPing has not yet been implemented")
		}),
		AppsCreateAppHandler: apps.CreateAppHandlerFunc(func(params apps.CreateAppParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsCreateApp has not yet been implemented")
		}),
		GroupsCreateGroupHandler: groups.CreateGroupHandlerFunc(func(params groups.CreateGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsCreateGroup has not yet been implemented")
		}),
		AppsDeleteAppHandler: apps.DeleteAppHandlerFunc(func(params apps.DeleteAppParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsDeleteApp has not yet been implemented")
		}),
		GroupsDeleteGroupHandler: groups.DeleteGroupHandlerFunc(func(params groups.DeleteGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsDeleteGroup has not yet been implemented")
		}),
		AppsGetAppHandler: apps.GetAppHandlerFunc(func(params apps.GetAppParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsGetApp has not yet been implemented")
		}),
		AppsGetAppsHandler: apps.GetAppsHandlerFunc(func(params apps.GetAppsParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsGetApps has not yet been implemented")
		}),
		DeploymentGetDeploymentHandler: deployment.GetDeploymentHandlerFunc(func(params deployment.GetDeploymentParams) middleware.Responder {
			return middleware.NotImplemented("operation DeploymentGetDeployment has not yet been implemented")
		}),
		GroupsGetGroupHandler: groups.GetGroupHandlerFunc(func(params groups.GetGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetGroup has not yet been implemented")
		}),
		GroupsGetGroupsHandler: groups.GetGroupsHandlerFunc(func(params groups.GetGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsGetGroups has not yet been implemented")
		}),
		AppsUpdateAppHandler: apps.UpdateAppHandlerFunc(func(params apps.UpdateAppParams) middleware.Responder {
			return middleware.NotImplemented("operation AppsUpdateApp has not yet been implemented")
		}),
		GroupsUpdateGroupHandler: groups.UpdateGroupHandlerFunc(func(params groups.UpdateGroupParams) middleware.Responder {
			return middleware.NotImplemented("operation GroupsUpdateGroup has not yet been implemented")
		}),
	}
}

/*ConsoleAPI The Console API Server for LAIN Cluster */
type ConsoleAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/vnd.laincloud.console.v1+json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/vnd.laincloud.console.v1+json" mime type
	JSONProducer runtime.Producer

	// PingGetPingHandler sets the operation handler for the get ping operation
	PingGetPingHandler ping.GetPingHandler
	// AppsCreateAppHandler sets the operation handler for the create app operation
	AppsCreateAppHandler apps.CreateAppHandler
	// GroupsCreateGroupHandler sets the operation handler for the create group operation
	GroupsCreateGroupHandler groups.CreateGroupHandler
	// AppsDeleteAppHandler sets the operation handler for the delete app operation
	AppsDeleteAppHandler apps.DeleteAppHandler
	// GroupsDeleteGroupHandler sets the operation handler for the delete group operation
	GroupsDeleteGroupHandler groups.DeleteGroupHandler
	// AppsGetAppHandler sets the operation handler for the get app operation
	AppsGetAppHandler apps.GetAppHandler
	// AppsGetAppsHandler sets the operation handler for the get apps operation
	AppsGetAppsHandler apps.GetAppsHandler
	// DeploymentGetDeploymentHandler sets the operation handler for the get deployment operation
	DeploymentGetDeploymentHandler deployment.GetDeploymentHandler
	// GroupsGetGroupHandler sets the operation handler for the get group operation
	GroupsGetGroupHandler groups.GetGroupHandler
	// GroupsGetGroupsHandler sets the operation handler for the get groups operation
	GroupsGetGroupsHandler groups.GetGroupsHandler
	// AppsUpdateAppHandler sets the operation handler for the update app operation
	AppsUpdateAppHandler apps.UpdateAppHandler
	// GroupsUpdateGroupHandler sets the operation handler for the update group operation
	GroupsUpdateGroupHandler groups.UpdateGroupHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *ConsoleAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *ConsoleAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *ConsoleAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *ConsoleAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *ConsoleAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *ConsoleAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *ConsoleAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the ConsoleAPI
func (o *ConsoleAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.PingGetPingHandler == nil {
		unregistered = append(unregistered, "ping.GetPingHandler")
	}

	if o.AppsCreateAppHandler == nil {
		unregistered = append(unregistered, "apps.CreateAppHandler")
	}

	if o.GroupsCreateGroupHandler == nil {
		unregistered = append(unregistered, "groups.CreateGroupHandler")
	}

	if o.AppsDeleteAppHandler == nil {
		unregistered = append(unregistered, "apps.DeleteAppHandler")
	}

	if o.GroupsDeleteGroupHandler == nil {
		unregistered = append(unregistered, "groups.DeleteGroupHandler")
	}

	if o.AppsGetAppHandler == nil {
		unregistered = append(unregistered, "apps.GetAppHandler")
	}

	if o.AppsGetAppsHandler == nil {
		unregistered = append(unregistered, "apps.GetAppsHandler")
	}

	if o.DeploymentGetDeploymentHandler == nil {
		unregistered = append(unregistered, "deployment.GetDeploymentHandler")
	}

	if o.GroupsGetGroupHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupHandler")
	}

	if o.GroupsGetGroupsHandler == nil {
		unregistered = append(unregistered, "groups.GetGroupsHandler")
	}

	if o.AppsUpdateAppHandler == nil {
		unregistered = append(unregistered, "apps.UpdateAppHandler")
	}

	if o.GroupsUpdateGroupHandler == nil {
		unregistered = append(unregistered, "groups.UpdateGroupHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *ConsoleAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *ConsoleAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *ConsoleAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *ConsoleAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/vnd.laincloud.console.v1+json":
			result["application/vnd.laincloud.console.v1+json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *ConsoleAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/vnd.laincloud.console.v1+json":
			result["application/vnd.laincloud.console.v1+json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *ConsoleAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the console API
func (o *ConsoleAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *ConsoleAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/ping"] = ping.NewGetPing(o.context, o.PingGetPingHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/groups/{group}/apps"] = apps.NewCreateApp(o.context, o.AppsCreateAppHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/groups"] = groups.NewCreateGroup(o.context, o.GroupsCreateGroupHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/groups/{group}/apps/{app}"] = apps.NewDeleteApp(o.context, o.AppsDeleteAppHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/groups/{group}"] = groups.NewDeleteGroup(o.context, o.GroupsDeleteGroupHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/groups/{group}/apps/{app}"] = apps.NewGetApp(o.context, o.AppsGetAppHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/groups/{group}/apps"] = apps.NewGetApps(o.context, o.AppsGetAppsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/groups/{group}/apps/{app}/deployment"] = deployment.NewGetDeployment(o.context, o.DeploymentGetDeploymentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/groups/{group}"] = groups.NewGetGroup(o.context, o.GroupsGetGroupHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/groups"] = groups.NewGetGroups(o.context, o.GroupsGetGroupsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/groups/{group}/apps/{app}"] = apps.NewUpdateApp(o.context, o.AppsUpdateAppHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/groups/{group}"] = groups.NewUpdateGroup(o.context, o.GroupsUpdateGroupHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *ConsoleAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *ConsoleAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *ConsoleAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *ConsoleAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
