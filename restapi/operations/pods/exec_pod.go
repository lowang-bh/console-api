// Code generated by go-swagger; DO NOT EDIT.

package pods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ExecPodHandlerFunc turns a function with the right signature into a exec pod handler
type ExecPodHandlerFunc func(ExecPodParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ExecPodHandlerFunc) Handle(params ExecPodParams) middleware.Responder {
	return fn(params)
}

// ExecPodHandler interface for that can handle valid exec pod params
type ExecPodHandler interface {
	Handle(ExecPodParams) middleware.Responder
}

// NewExecPod creates a new http.Handler for the exec pod operation
func NewExecPod(ctx *middleware.Context, handler ExecPodHandler) *ExecPod {
	return &ExecPod{Context: ctx, Handler: handler}
}

/*ExecPod swagger:route GET /api/v1/groups/{groupname}/runtime/apps/{appname}/pods/{podname}/exec pods execPod

长连接

*/
type ExecPod struct {
	Context *middleware.Context
	Handler ExecPodHandler
}

func (o *ExecPod) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewExecPodParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
