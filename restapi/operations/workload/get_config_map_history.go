// Code generated by go-swagger; DO NOT EDIT.

package workload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetConfigMapHistoryHandlerFunc turns a function with the right signature into a get config map history handler
type GetConfigMapHistoryHandlerFunc func(GetConfigMapHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConfigMapHistoryHandlerFunc) Handle(params GetConfigMapHistoryParams) middleware.Responder {
	return fn(params)
}

// GetConfigMapHistoryHandler interface for that can handle valid get config map history params
type GetConfigMapHistoryHandler interface {
	Handle(GetConfigMapHistoryParams) middleware.Responder
}

// NewGetConfigMapHistory creates a new http.Handler for the get config map history operation
func NewGetConfigMapHistory(ctx *middleware.Context, handler GetConfigMapHistoryHandler) *GetConfigMapHistory {
	return &GetConfigMapHistory{Context: ctx, Handler: handler}
}

/*GetConfigMapHistory swagger:route GET /api/v1/groups/{groupname}/runtime/apps/{appname}/configmap/history workload getConfigMapHistory

GetConfigMapHistory get config map history API

*/
type GetConfigMapHistory struct {
	Context *middleware.Context
	Handler GetConfigMapHistoryHandler
}

func (o *GetConfigMapHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetConfigMapHistoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
