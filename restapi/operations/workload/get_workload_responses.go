// Code generated by go-swagger; DO NOT EDIT.

package workload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/laincloud/console-api/models"
)

// GetWorkloadOKCode is the HTTP code returned for type GetWorkloadOK
const GetWorkloadOKCode int = 200

/*GetWorkloadOK Get the workload of the runtime app

swagger:response getWorkloadOK
*/
type GetWorkloadOK struct {

	/*
	  In: Body
	*/
	Payload *models.Workload `json:"body,omitempty"`
}

// NewGetWorkloadOK creates GetWorkloadOK with default headers values
func NewGetWorkloadOK() *GetWorkloadOK {

	return &GetWorkloadOK{}
}

// WithPayload adds the payload to the get workload o k response
func (o *GetWorkloadOK) WithPayload(payload *models.Workload) *GetWorkloadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workload o k response
func (o *GetWorkloadOK) SetPayload(payload *models.Workload) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkloadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetWorkloadDefault Failed

swagger:response getWorkloadDefault
*/
type GetWorkloadDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetWorkloadDefault creates GetWorkloadDefault with default headers values
func NewGetWorkloadDefault(code int) *GetWorkloadDefault {
	if code <= 0 {
		code = 500
	}

	return &GetWorkloadDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get workload default response
func (o *GetWorkloadDefault) WithStatusCode(code int) *GetWorkloadDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get workload default response
func (o *GetWorkloadDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get workload default response
func (o *GetWorkloadDefault) WithPayload(payload *models.Error) *GetWorkloadDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get workload default response
func (o *GetWorkloadDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWorkloadDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
