// Code generated by go-swagger; DO NOT EDIT.

package workload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateWorkloadHandlerFunc turns a function with the right signature into a create or update workload handler
type CreateOrUpdateWorkloadHandlerFunc func(CreateOrUpdateWorkloadParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateWorkloadHandlerFunc) Handle(params CreateOrUpdateWorkloadParams) middleware.Responder {
	return fn(params)
}

// CreateOrUpdateWorkloadHandler interface for that can handle valid create or update workload params
type CreateOrUpdateWorkloadHandler interface {
	Handle(CreateOrUpdateWorkloadParams) middleware.Responder
}

// NewCreateOrUpdateWorkload creates a new http.Handler for the create or update workload operation
func NewCreateOrUpdateWorkload(ctx *middleware.Context, handler CreateOrUpdateWorkloadHandler) *CreateOrUpdateWorkload {
	return &CreateOrUpdateWorkload{Context: ctx, Handler: handler}
}

/*CreateOrUpdateWorkload swagger:route PUT /api/v1/groups/{groupname}/runtime/apps/{appname}/workload workload createOrUpdateWorkload

CreateOrUpdateWorkload create or update workload API

*/
type CreateOrUpdateWorkload struct {
	Context *middleware.Context
	Handler CreateOrUpdateWorkloadHandler
}

func (o *CreateOrUpdateWorkload) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateOrUpdateWorkloadParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
