// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateServicesHandlerFunc turns a function with the right signature into a create or update services handler
type CreateOrUpdateServicesHandlerFunc func(CreateOrUpdateServicesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateServicesHandlerFunc) Handle(params CreateOrUpdateServicesParams) middleware.Responder {
	return fn(params)
}

// CreateOrUpdateServicesHandler interface for that can handle valid create or update services params
type CreateOrUpdateServicesHandler interface {
	Handle(CreateOrUpdateServicesParams) middleware.Responder
}

// NewCreateOrUpdateServices creates a new http.Handler for the create or update services operation
func NewCreateOrUpdateServices(ctx *middleware.Context, handler CreateOrUpdateServicesHandler) *CreateOrUpdateServices {
	return &CreateOrUpdateServices{Context: ctx, Handler: handler}
}

/*CreateOrUpdateServices swagger:route PUT /api/v1/groups/{groupname}/runtimeapps/{appname}/services services createOrUpdateServices

CreateOrUpdateServices create or update services API

*/
type CreateOrUpdateServices struct {
	Context *middleware.Context
	Handler CreateOrUpdateServicesHandler
}

func (o *CreateOrUpdateServices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateOrUpdateServicesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
