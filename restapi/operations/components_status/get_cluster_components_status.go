// Code generated by go-swagger; DO NOT EDIT.

package components_status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetClusterComponentsStatusHandlerFunc turns a function with the right signature into a get cluster components status handler
type GetClusterComponentsStatusHandlerFunc func(GetClusterComponentsStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetClusterComponentsStatusHandlerFunc) Handle(params GetClusterComponentsStatusParams) middleware.Responder {
	return fn(params)
}

// GetClusterComponentsStatusHandler interface for that can handle valid get cluster components status params
type GetClusterComponentsStatusHandler interface {
	Handle(GetClusterComponentsStatusParams) middleware.Responder
}

// NewGetClusterComponentsStatus creates a new http.Handler for the get cluster components status operation
func NewGetClusterComponentsStatus(ctx *middleware.Context, handler GetClusterComponentsStatusHandler) *GetClusterComponentsStatus {
	return &GetClusterComponentsStatus{Context: ctx, Handler: handler}
}

/*GetClusterComponentsStatus swagger:route GET /api/v1/cluster/componentsstatus componentsStatus getClusterComponentsStatus

GetClusterComponentsStatus get cluster components status API

*/
type GetClusterComponentsStatus struct {
	Context *middleware.Context
	Handler GetClusterComponentsStatusHandler
}

func (o *GetClusterComponentsStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetClusterComponentsStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
