// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateSecretHandlerFunc turns a function with the right signature into a create or update secret handler
type CreateOrUpdateSecretHandlerFunc func(CreateOrUpdateSecretParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateSecretHandlerFunc) Handle(params CreateOrUpdateSecretParams) middleware.Responder {
	return fn(params)
}

// CreateOrUpdateSecretHandler interface for that can handle valid create or update secret params
type CreateOrUpdateSecretHandler interface {
	Handle(CreateOrUpdateSecretParams) middleware.Responder
}

// NewCreateOrUpdateSecret creates a new http.Handler for the create or update secret operation
func NewCreateOrUpdateSecret(ctx *middleware.Context, handler CreateOrUpdateSecretHandler) *CreateOrUpdateSecret {
	return &CreateOrUpdateSecret{Context: ctx, Handler: handler}
}

/*CreateOrUpdateSecret swagger:route PUT /api/v1/groups/{groupname}/runtimeapps/{appname}/secret secret createOrUpdateSecret

CreateOrUpdateSecret create or update secret API

*/
type CreateOrUpdateSecret struct {
	Context *middleware.Context
	Handler CreateOrUpdateSecretHandler
}

func (o *CreateOrUpdateSecret) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateOrUpdateSecretParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
