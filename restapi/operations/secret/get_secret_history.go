// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSecretHistoryHandlerFunc turns a function with the right signature into a get secret history handler
type GetSecretHistoryHandlerFunc func(GetSecretHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSecretHistoryHandlerFunc) Handle(params GetSecretHistoryParams) middleware.Responder {
	return fn(params)
}

// GetSecretHistoryHandler interface for that can handle valid get secret history params
type GetSecretHistoryHandler interface {
	Handle(GetSecretHistoryParams) middleware.Responder
}

// NewGetSecretHistory creates a new http.Handler for the get secret history operation
func NewGetSecretHistory(ctx *middleware.Context, handler GetSecretHistoryHandler) *GetSecretHistory {
	return &GetSecretHistory{Context: ctx, Handler: handler}
}

/*GetSecretHistory swagger:route GET /api/v1/groups/{groupname}/runtime/apps/{appname}/secrets/history secret getSecretHistory

GetSecretHistory get secret history API

*/
type GetSecretHistory struct {
	Context *middleware.Context
	Handler GetSecretHistoryHandler
}

func (o *GetSecretHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSecretHistoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
