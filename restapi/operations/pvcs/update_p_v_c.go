// Code generated by go-swagger; DO NOT EDIT.

package pvcs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdatePVCHandlerFunc turns a function with the right signature into a update p v c handler
type UpdatePVCHandlerFunc func(UpdatePVCParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdatePVCHandlerFunc) Handle(params UpdatePVCParams) middleware.Responder {
	return fn(params)
}

// UpdatePVCHandler interface for that can handle valid update p v c params
type UpdatePVCHandler interface {
	Handle(UpdatePVCParams) middleware.Responder
}

// NewUpdatePVC creates a new http.Handler for the update p v c operation
func NewUpdatePVC(ctx *middleware.Context, handler UpdatePVCHandler) *UpdatePVC {
	return &UpdatePVC{Context: ctx, Handler: handler}
}

/*UpdatePVC swagger:route PUT /api/v1/groups/{groupname}/runtime/pvcs/{pvcname} pvcs updatePVC

UpdatePVC update p v c API

*/
type UpdatePVC struct {
	Context *middleware.Context
	Handler UpdatePVCHandler
}

func (o *UpdatePVC) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdatePVCParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
