// Code generated by go-swagger; DO NOT EDIT.

package pvcs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPVCsHandlerFunc turns a function with the right signature into a get p v cs handler
type GetPVCsHandlerFunc func(GetPVCsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPVCsHandlerFunc) Handle(params GetPVCsParams) middleware.Responder {
	return fn(params)
}

// GetPVCsHandler interface for that can handle valid get p v cs params
type GetPVCsHandler interface {
	Handle(GetPVCsParams) middleware.Responder
}

// NewGetPVCs creates a new http.Handler for the get p v cs operation
func NewGetPVCs(ctx *middleware.Context, handler GetPVCsHandler) *GetPVCs {
	return &GetPVCs{Context: ctx, Handler: handler}
}

/*GetPVCs swagger:route GET /api/v1/groups/{groupname}/runtime/pvcs pvcs getPVCs

GetPVCs get p v cs API

*/
type GetPVCs struct {
	Context *middleware.Context
	Handler GetPVCsHandler
}

func (o *GetPVCs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPVCsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
