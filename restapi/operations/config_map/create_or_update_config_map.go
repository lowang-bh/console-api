// Code generated by go-swagger; DO NOT EDIT.

package config_map

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateOrUpdateConfigMapHandlerFunc turns a function with the right signature into a create or update config map handler
type CreateOrUpdateConfigMapHandlerFunc func(CreateOrUpdateConfigMapParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOrUpdateConfigMapHandlerFunc) Handle(params CreateOrUpdateConfigMapParams) middleware.Responder {
	return fn(params)
}

// CreateOrUpdateConfigMapHandler interface for that can handle valid create or update config map params
type CreateOrUpdateConfigMapHandler interface {
	Handle(CreateOrUpdateConfigMapParams) middleware.Responder
}

// NewCreateOrUpdateConfigMap creates a new http.Handler for the create or update config map operation
func NewCreateOrUpdateConfigMap(ctx *middleware.Context, handler CreateOrUpdateConfigMapHandler) *CreateOrUpdateConfigMap {
	return &CreateOrUpdateConfigMap{Context: ctx, Handler: handler}
}

/*CreateOrUpdateConfigMap swagger:route PUT /api/v1/groups/{groupname}/runtime/apps/{appname}/configmap configMap createOrUpdateConfigMap

CreateOrUpdateConfigMap create or update config map API

*/
type CreateOrUpdateConfigMap struct {
	Context *middleware.Context
	Handler CreateOrUpdateConfigMapHandler
}

func (o *CreateOrUpdateConfigMap) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateOrUpdateConfigMapParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
