// Code generated by go-swagger; DO NOT EDIT.

package ping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAPIV1PingHandlerFunc turns a function with the right signature into a get API v1 ping handler
type GetAPIV1PingHandlerFunc func(GetAPIV1PingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAPIV1PingHandlerFunc) Handle(params GetAPIV1PingParams) middleware.Responder {
	return fn(params)
}

// GetAPIV1PingHandler interface for that can handle valid get API v1 ping params
type GetAPIV1PingHandler interface {
	Handle(GetAPIV1PingParams) middleware.Responder
}

// NewGetAPIV1Ping creates a new http.Handler for the get API v1 ping operation
func NewGetAPIV1Ping(ctx *middleware.Context, handler GetAPIV1PingHandler) *GetAPIV1Ping {
	return &GetAPIV1Ping{Context: ctx, Handler: handler}
}

/*GetAPIV1Ping swagger:route GET /api/v1/ping ping getApiV1Ping

GetAPIV1Ping get API v1 ping API

*/
type GetAPIV1Ping struct {
	Context *middleware.Context
	Handler GetAPIV1PingHandler
}

func (o *GetAPIV1Ping) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAPIV1PingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
